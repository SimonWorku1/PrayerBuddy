rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read public profiles; user can update their own
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Friend requests
    match /friend_requests/{requestId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    // Unique handles with 30-day cooldown
    match /handles/{handle} {
      allow read: if true;
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && !exists(/databases/$(database)/documents/handles/$(handle))
        && (
          // If user doc missing or timestamp missing, allow first claim
          !exists(/databases/$(database)/documents/users/$(request.auth.uid)) ||
          !get(/databases/$(database)/documents/users/$(request.auth.uid)).data.handleUpdatedAt.exists() ||
          request.time > get(/databases/$(database)/documents/users/$(request.auth.uid)).data.handleUpdatedAt + duration.value(30, 'd')
        );
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow update: if false;
    }
  }
}





