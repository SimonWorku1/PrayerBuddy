rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Chats and messages
    match /chats/{chatId} {
      // Members only
      allow read: if isSignedIn() && (request.auth.uid in resource.data.memberIds);
      allow create: if isSignedIn()
        && (request.resource.data.memberIds is list)
        && (request.auth.uid in request.resource.data.memberIds);
      allow update, delete: if isSignedIn() && (request.auth.uid in resource.data.memberIds);

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.memberIds);
        allow create: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.memberIds);
        allow update, delete: if false; // Immutable messages
      }
    }
    function isSignedIn() {
      return request.auth != null;
    }

    function canChangeHandle(uid) {
      // A user may change handles at most 3 times within a 30-day window.
      // Window anchor and count are stored on users/{uid}.
      return (
        // Allow if window not started
        get(/databases/$(database)/documents/users/$(uid)).data.handleChangeResetAt == null
      ) || (
        // Allow if window expired
        request.time > get(/databases/$(database)/documents/users/$(uid)).data.handleChangeResetAt + duration.value(30, 'd')
      ) || (
        // Allow if under the limit
        (
          (get(/databases/$(database)/documents/users/$(uid)).data.handleChangeCount == null ? 0 : get(/databases/$(database)/documents/users/$(uid)).data.handleChangeCount) < 3
        )
      );
    }

    // Users can read public profiles; user can update their own
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Friends subcollection under users
    match /users/{userId}/friends/{friendId} {
      allow read: if isSignedIn();
      // Either user involved in the friendship may write
      allow create, update, delete: if isSignedIn() &&
        (request.auth.uid == userId || request.auth.uid == friendId);
    }

    // Posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Friend requests
    match /friend_requests/{requestId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    // Unique handles with 30-day cooldown
    match /handles/{handle} {
      allow read: if true;
      // Enforce <=3 changes per 30 days
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && !exists(/databases/$(database)/documents/handles/$(handle))
        && canChangeHandle(request.auth.uid);
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow update: if false;
    }
  }
}





